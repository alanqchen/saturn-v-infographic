{"version":3,"sources":["saturnV.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","items","config","mass","tension","friction","reset","App","useState","toggle","trail","useTrail","length","opacity","x","height","from","className","rel","href","integrity","crossorigin","map","index","rest","div","key","style","transform","interpolate","Navbar","fixed","expand","variant","bg","Brand","Container","id","Row","src","SaturnVSVG","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,qC,oPCYrCC,EAAQ,CAAC,SAAU,KACnBC,EAAS,CAAEC,KAAM,EAAGC,QAAS,IAAMC,SAAU,IAAKC,OAAO,GAiDhDC,MA/Cf,WAAgB,IAAD,EACSC,oBAAS,GADlB,mBACNC,EADM,KAEPC,GAFO,KAECC,YAASV,EAAMW,OAAQ,CACnCV,SACAW,QAASJ,EAAS,EAAI,EACtBK,EAAGL,EAAS,EAAI,GAChBM,OAAQN,EAAS,GAAK,EACtBO,KAAM,CAAEH,QAAS,EAAGC,EAAG,GAAIC,OAAQ,MAErC,OACE,yBAAKE,UAAU,OACP,0BACJC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,cAEd,yBAAKJ,UAAU,eACb,6BACGP,EAAMY,KAAI,WAAyBC,GAAzB,IAAGT,EAAH,EAAGA,EAAGC,EAAN,EAAMA,OAAWS,EAAjB,qCACT,kBAAC,IAASC,IAAV,CACEC,IAAKzB,EAAMsB,GACXN,UAAU,cACVU,MAAK,eAAOH,EAAP,CAAaI,UAAWd,EAAEe,aAAY,SAAAf,GAAC,8BAAqBA,EAArB,eAC5C,kBAAC,IAASW,IAAV,CAAcE,MAAO,CAAEZ,WAAWd,EAAMsB,UAKhD,kBAACO,EAAA,EAAD,CAAQC,MAAM,MAAMC,OAAO,KAAKC,QAAQ,OAAOC,GAAG,QAChD,kBAACJ,EAAA,EAAOK,MAAR,CAAchB,KAAK,IAAIF,UAAU,UAAjC,aAEF,4BAAQA,UAAU,cAChB,kBAACmB,EAAA,EAAD,CAAWC,GAAG,qBACZ,kBAACC,EAAA,EAAD,KACA,yBAAKC,IAAKC,IAAYvB,UAAU,aAAawB,IAAI,YAIrD,4BAAQF,IAAI,qEC1CEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc376b25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/saturnV.4cbb6d8a.svg\";","import React, { useState } from 'react'\nimport './App.css';\nimport 'swiper/css/swiper.css'\nimport SaturnVSVG from './saturnV.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { useTrail, animated } from 'react-spring'\nimport MousewheelControl from './components/Mousewheelcontrol'\nimport Navbar from 'react-bootstrap/Navbar'\n\nconst items = ['SATURN', 'V']\nconst config = { mass: 5, tension: 2000, friction: 200, reset: true }\n\nfunction App() {\n  const [toggle, set] = useState(true)\n  const trail = useTrail(items.length, {\n    config,\n    opacity: toggle ? 1 : 0,\n    x: toggle ? 0 : 20,\n    height: toggle ? 80 : 0,\n    from: { opacity: 0, x: 20, height: 0 },\n  })\n  return (\n    <div className=\"App\">\n            <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n        integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n        crossorigin=\"anonymous\"\n      />\n      <div className=\"trails-main\">\n        <div>\n          {trail.map(({ x, height, ...rest }, index) => (\n            <animated.div\n              key={items[index]}\n              className=\"trails-text\"\n              style={{ ...rest, transform: x.interpolate(x => `translate3d(0,${x}px,0)`) }}>\n              <animated.div style={{ height }}>{items[index]}</animated.div>\n            </animated.div>\n          ))}\n        </div>\n      </div>\n      <Navbar fixed=\"top\" expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\" className=\"header\">SATURN V</Navbar.Brand>\n      </Navbar>\n      <header className=\"App-header\">\n        <Container id=\"containerNoMargin\">\n          <Row>\n          <img src={SaturnVSVG} className=\"SaturnVSVG\" alt=\"logo\" />\n          </Row>\n        </Container>\n      </header>\n      <script src=\"https://unpkg.com/react-id-swiper@2.3.1/lib/react-id-swiper.js\"></script>\n\n    </div>\n    \n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}